name: Simple Docker Build
on:
  workflow_dispatch:

jobs:
  # build-docker-image:
  #   runs-on: tag3
  #   steps:
      
  #     - name: Build yelb-ui Docker image
  #       run: |
  #         docker build --no-cache -t yelb-appserver:latest ./yelb-appserver
  #         docker build -t yelb-ui:latest ./yelb-ui
  #         docker build -t yelb-db:latest ./yelb-db

  # ECR-push:
  #   runs-on: tag3
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Tag Docker image
  #       run: |
  #         docker tag yelb-ui:latest 311141523175.dkr.ecr.us-east-1.amazonaws.com/ecr1:yelb-ui
  #         docker tag yelb-db:latest 311141523175.dkr.ecr.us-east-1.amazonaws.com/ecr1:yelb-db
  #         docker tag yelb-appserver:latest 311141523175.dkr.ecr.us-east-1.amazonaws.com/ecr1:yelb-appserver

  #     # - name: Push Docker image to ECR
  #     #   run: |
  #     #     docker push 311141523175.dkr.ecr.us-east-1.amazonaws.com/ecr1:yelb-ui
  #     #     docker push 311141523175.dkr.ecr.us-east-1.amazonaws.com/ecr1:yelb-db
  #     #     docker push 311141523175.dkr.ecr.us-east-1.amazonaws.com/ecr1:yelb-appserver

  # Docker-scout-scanning:
  #   runs-on: tag3
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}


  #     - name: Scanning docker imgaes with docker-scout scanning
  #       run: |
  #         docker scout cves yelb-ui:latest > /home/fs-lp-27/reports/yelb-ui-cves.txt
  #         docker scout cves yelb-db:latest > /home/fs-lp-27/reports/yelb-db-cves.txt
  #         docker scout cves yelb-appserver:latest > /home/fs-lp-27/reports/yelb-appserver-cves.txt

  Hadolint-scanning:
    runs-on: tag3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Scan docker images for Docker hadolint
        run: |
          hadolint ./yelb-ui/Dockerfile --ignore DL3003 --ignore DL3020 --ignore DL4000 --ignore DL3059 --ignore DL3022
          hadolint ./yelb-db/Dockerfile --ignore DL3003 DL4000 --ignore
          hadolint ./yelb-appserver/Dockerfile --ignore DL3003 --ignore DL3028

  jfrog-Integration-check:
    runs-on: tag3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JFrog CLI with server config
        uses: jfrog/setup-jfrog-cli@v3
        with:
          version: latest
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}

      - name: Configure JFrog CLI with Access Token
        run: |
          jf config add my-new-server \
            --url=${{ secrets.JF_URL }} \
            --user=${{ secrets.JF_USER }} \
            --access-token=${{ secrets.JF_ACCESS_TOKEN }} \
            --interactive=false

      - name: Upload artifact to Artifactory
        run: |
          jf rt u "/home/fs-lp-27/reports/yelb-ui-cves.txt" "yelb/yelb-cve-reports/" --flat=true --server-id=my-new-server
          jf rt u "/home/fs-lp-27/reports/yelb-db-cves.txt" "yelb/yelb-cve-reports/" --flat=true --server-id=my-new-server
          jf rt u "/home/fs-lp-27/reports/yelb-appserver-cves.txt" "yelb/yelb-cve-reports/" --flat=true --server-id=my-new-server

  Slack-Integration:
    runs-on: tag3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Notify Slack on success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Build succeeded on GitHub Actions!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Build failed on GitHub Actions."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  Deploy-production:
    runs-on: tag3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy project to EC2 via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "~/app"

      - name: Run docker-compose on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app
            docker-compose down
            docker-compose -f deployments/localtest/docker-compose.yaml up -d
